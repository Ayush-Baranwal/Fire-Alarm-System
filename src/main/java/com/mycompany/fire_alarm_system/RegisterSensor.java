/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mycompany.fire_alarm_system;
/**
 *
 * @author HP
 */

import static com.mycompany.fire_alarm_system.MainScreen.f0;
import static com.mycompany.fire_alarm_system.MainScreen.f1;
import static com.mycompany.fire_alarm_system.MainScreen.f2;
import static com.mycompany.fire_alarm_system.MainScreen.f3;
import static com.mycompany.fire_alarm_system.MainScreen.f4;
import static com.mycompany.fire_alarm_system.MainScreen.f5;
import java.util.Map.Entry;
import javax.swing.*; 
public class RegisterSensor extends javax.swing.JFrame {

    /**
     * Creates new form Register_a_sensor
     */
    public RegisterSensor() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        sensorIdLabel = new javax.swing.JLabel();
        sensorTypeLabel = new javax.swing.JLabel();
        floorLabel = new javax.swing.JLabel();
        locationLabel = new javax.swing.JLabel();
        sensorIdTextField = new javax.swing.JTextField();
        sensorTypeComboBox = new javax.swing.JComboBox<>();
        floorTextField = new javax.swing.JTextField();
        backButton = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        registerLabel = new javax.swing.JLabel();
        saveButton = new javax.swing.JButton();
        locationComboBox = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(44, 62, 80));

        sensorIdLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        sensorIdLabel.setForeground(new java.awt.Color(255, 255, 255));
        sensorIdLabel.setText("Sensor ID:");

        sensorTypeLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        sensorTypeLabel.setForeground(new java.awt.Color(255, 255, 255));
        sensorTypeLabel.setText("Sensor Type:");

        floorLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        floorLabel.setForeground(new java.awt.Color(255, 255, 255));
        floorLabel.setText("Floor No:");

        locationLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        locationLabel.setForeground(new java.awt.Color(255, 255, 255));
        locationLabel.setText("Install Location:");

        sensorIdTextField.setBackground(new java.awt.Color(44, 62, 80));
        sensorIdTextField.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        sensorIdTextField.setForeground(new java.awt.Color(255, 255, 255));
        sensorIdTextField.setOpaque(false);

        sensorTypeComboBox.setBackground(new java.awt.Color(108, 120, 137));
        sensorTypeComboBox.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        sensorTypeComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "CO Sensor", "Heat Sensor", "Smoke Sensor" }));
        sensorTypeComboBox.setToolTipText("Choose sensor type");
        sensorTypeComboBox.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        sensorTypeComboBox.setName(""); // NOI18N
        sensorTypeComboBox.setOpaque(false);

        floorTextField.setBackground(new java.awt.Color(44, 62, 80));
        floorTextField.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        floorTextField.setForeground(new java.awt.Color(255, 255, 255));
        floorTextField.setOpaque(false);

        backButton.setBackground(new java.awt.Color(255, 51, 51));
        backButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        backButton.setText("Back");
        backButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        backButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                backButtonMouseClicked(evt);
            }
        });
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        jPanel2.setBackground(new java.awt.Color(248, 148, 6));

        registerLabel.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        registerLabel.setForeground(new java.awt.Color(255, 255, 255));
        registerLabel.setText("Register a Sensor");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(124, Short.MAX_VALUE)
                .addComponent(registerLabel)
                .addContainerGap(99, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(registerLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        saveButton.setBackground(new java.awt.Color(0, 119, 182));
        saveButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        saveButton.setText("Save");
        saveButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        saveButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                saveButtonMouseClicked(evt);
            }
        });

        locationComboBox.setBackground(new java.awt.Color(108, 120, 137));
        locationComboBox.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        locationComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Room 1", "Room 2", "Room 3", "Room 4", "Room 5", "Room 6", "Lab 1", "Lab 2", "Stairs 1", "Stairs 2", "Hall" }));
        locationComboBox.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        locationComboBox.setOpaque(false);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(sensorIdLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sensorTypeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(floorLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(locationLabel)
                    .addComponent(backButton, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(60, 60, 60)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(sensorTypeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(sensorIdTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 110, Short.MAX_VALUE)
                        .addComponent(floorTextField))
                    .addComponent(locationComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(saveButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 48, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sensorIdTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sensorIdLabel))
                .addGap(18, 27, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sensorTypeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sensorTypeLabel))
                .addGap(18, 29, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(floorTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(floorLabel))
                .addGap(18, 29, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(locationLabel)
                    .addComponent(locationComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 36, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(backButton)
                    .addComponent(saveButton))
                .addContainerGap(52, Short.MAX_VALUE))
        );

        sensorTypeComboBox.getAccessibleContext().setAccessibleName("");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    //ActionListener for canceling the registration and directing to MainScreen window.
    private void backButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_backButtonMouseClicked
        // TODO add your handling code here:
        MainScreen.dashBoard.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_backButtonMouseClicked
    //ActionListener for saving data of registered sensor and directing to MainScreen window.
    private void saveButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_saveButtonMouseClicked
        // TODO add your handling code here:
        int errorFlag=0;
        for(Entry<String,Location> mp : f3.entrySet()){
            if(mp.getValue().coID.equals(sensorIdTextField.getText())||mp.getValue().heatID.equals(sensorIdTextField.getText())||mp.getValue().smokeID.equals(sensorIdTextField.getText()))
                errorFlag++;
        }
        for(Entry<String,Location> mp : f1.entrySet()){
            if(mp.getValue().coID.equals(sensorIdTextField.getText())||mp.getValue().heatID.equals(sensorIdTextField.getText())||mp.getValue().smokeID.equals(sensorIdTextField.getText()))
                errorFlag++;
        }
        for(Entry<String,Location> mp : f2.entrySet()){
            if(mp.getValue().coID.equals(sensorIdTextField.getText())||mp.getValue().heatID.equals(sensorIdTextField.getText())||mp.getValue().smokeID.equals(sensorIdTextField.getText()))
                errorFlag++;
        }
        for(Entry<String,Location> mp : f3.entrySet()){
            if(mp.getValue().coID.equals(sensorIdTextField.getText())||mp.getValue().heatID.equals(sensorIdTextField.getText())||mp.getValue().smokeID.equals(sensorIdTextField.getText()))
                errorFlag++;
        }
        for(Entry<String,Location> mp : f4.entrySet()){
            if(mp.getValue().coID.equals(sensorIdTextField.getText())||mp.getValue().heatID.equals(sensorIdTextField.getText())||mp.getValue().smokeID.equals(sensorIdTextField.getText()))
                errorFlag++;
        }
        for(Entry<String,Location> mp : f5.entrySet()){
            if(mp.getValue().coID.equals(sensorIdTextField.getText())||mp.getValue().heatID.equals(sensorIdTextField.getText())||mp.getValue().smokeID.equals(sensorIdTextField.getText()))
                errorFlag++;
        }
        
        if((!floorTextField.getText().matches("[0-5]$"))){    
             errorFlag=errorFlag+2;
        }
        if("".equals(sensorIdTextField.getText())){
            errorFlag+=4;
        }
        
        switch(errorFlag){
            case 1:
                JOptionPane.showMessageDialog(this,"Entered Sensor ID already used!");
                RegisterSensor R2 = new RegisterSensor();
                R2.setVisible(true);
                this.dispose();
                break;
            case 2:
                JOptionPane.showMessageDialog(this,"Entered floor doesn't exist in CC3!");
                RegisterSensor R3 = new RegisterSensor();
                R3.setVisible(true);
                this.dispose();
                break;
            case 3:
                JOptionPane.showMessageDialog(this,"Entered Sensor ID already used and entered floor doesn't exist in CC3!");
                RegisterSensor R4 = new RegisterSensor();
                R4.setVisible(true);
                this.dispose();
                break;
            case 4:
                JOptionPane.showMessageDialog(this,"Sensor ID can't be left blank!");
                RegisterSensor R5 = new RegisterSensor();
                R5.setVisible(true);
                this.dispose();
                break;
            case 6:
                JOptionPane.showMessageDialog(this,"Sensor ID can't be left blank and entered floor doesn't exist in CC3!");
                RegisterSensor R6 = new RegisterSensor();
                R6.setVisible(true);
                this.dispose();
                break;
            case 0:
            {
                Sensor tempSensor = new Sensor();
                tempSensor.sensorID = sensorIdTextField.getText();
                tempSensor.floorno = Integer.parseInt(floorTextField.getText());
                tempSensor.location = locationComboBox.getSelectedItem().toString();
                tempSensor.SensorType =  sensorTypeComboBox.getSelectedItem().toString();  
                
                Location L=new Location();   
                
                switch(tempSensor.SensorType){
                    case "Smoke Sensor":
                        L.smokeID=tempSensor.sensorID;
                        break;
                    case "Heat Sensor":
                        L.heatID=tempSensor.sensorID;
                        break;
                    case "CO Sensor":
                        L.coID=tempSensor.sensorID;
                        break;
                }
                        
                switch(tempSensor.floorno){
                    case 0:
                        if(f0.containsKey(tempSensor.location)){
                            switch(tempSensor.SensorType){
                                case "Smoke Sensor":
                                    f0.get(tempSensor.location).smokeID=tempSensor.sensorID;
                                    break;
                                case "Heat Sensor":
                                    f0.get(tempSensor.location).heatID=tempSensor.sensorID;
                                    break;
                                case "CO Sensor":
                                    f0.get(tempSensor.location).coID=tempSensor.sensorID;
                                    break;
                            }
                                    }
                        else
                            f0.put(tempSensor.location, L);
                        break;
                    case 1:
                        if(f1.containsKey(tempSensor.location)){
                            switch(tempSensor.SensorType){
                                case "Smoke Sensor":
                                    f1.get(tempSensor.location).smokeID=tempSensor.sensorID;
                                    break;
                                case "Heat Sensor":
                                    f1.get(tempSensor.location).heatID=tempSensor.sensorID;
                                    break;
                                case "CO Sensor":
                                    f1.get(tempSensor.location).coID=tempSensor.sensorID;
                                    break;
                            }
                                    }
                        else
                            f1.put(tempSensor.location, L);
                        break;
                    case 2:
                        if(f2.containsKey(tempSensor.location)){
                            switch(tempSensor.SensorType){
                                case "Smoke Sensor":
                                    f2.get(tempSensor.location).smokeID=tempSensor.sensorID;
                                    break;
                                case "Heat Sensor":
                                    f2.get(tempSensor.location).heatID=tempSensor.sensorID;
                                    break;
                                case "CO Sensor":
                                    f2.get(tempSensor.location).coID=tempSensor.sensorID;
                                    break;
                            }
                                    }
                        else
                            f2.put(tempSensor.location, L);
                        break;
                    case 3:
                        if(f3.containsKey(tempSensor.location)){
                            switch(tempSensor.SensorType){
                                case "Smoke Sensor":
                                    f3.get(tempSensor.location).smokeID=tempSensor.sensorID;
                                    break;
                                case "Heat Sensor":
                                    f3.get(tempSensor.location).heatID=tempSensor.sensorID;
                                    break;
                                case "CO Sensor":
                                    f3.get(tempSensor.location).coID=tempSensor.sensorID;
                                    break;
                            }
                                    }
                        else
                            f3.put(tempSensor.location, L);
                        break;
                    case 4:
                        if(f4.containsKey(tempSensor.location)){
                            switch(tempSensor.SensorType){
                                case "Smoke Sensor":
                                    f4.get(tempSensor.location).smokeID=tempSensor.sensorID;
                                    break;
                                case "Heat Sensor":
                                    f4.get(tempSensor.location).heatID=tempSensor.sensorID;
                                    break;
                                case "CO Sensor":
                                    f4.get(tempSensor.location).coID=tempSensor.sensorID;
                                    break;
                            }
                                    }
                        else
                            f4.put(tempSensor.location, L);
                        break;
                    case 5:
                        if(f5.containsKey(tempSensor.location)){
                            switch(tempSensor.SensorType){
                                case "Smoke Sensor":
                                    f5.get(tempSensor.location).smokeID=tempSensor.sensorID;
                                    break;
                                case "Heat Sensor":
                                    f5.get(tempSensor.location).heatID=tempSensor.sensorID;
                                    break;
                                case "CO Sensor":
                                    f5.get(tempSensor.location).coID=tempSensor.sensorID;
                                    break;
                            }
                                    }
                        else
                            f5.put(tempSensor.location, L);
                        break;
                }
            synchronized(this){
                FileIO.WriteToFile("Sensor Registered\nID:"+tempSensor.sensorID+"\nType:"+tempSensor.SensorType+"\nFloor:"+tempSensor.floorno+"\nLocation:"+tempSensor.location+"\n");
            }
            JOptionPane.showMessageDialog(this,"Sensor Registered.");
            RegisterSensor R=new RegisterSensor();
            R.setVisible(true);
            this.dispose();
            break;
            }
        }
    }//GEN-LAST:event_saveButtonMouseClicked

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_backButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RegisterSensor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RegisterSensor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RegisterSensor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RegisterSensor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new RegisterSensor().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backButton;
    private javax.swing.JLabel floorLabel;
    private javax.swing.JTextField floorTextField;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JComboBox<String> locationComboBox;
    private javax.swing.JLabel locationLabel;
    private javax.swing.JLabel registerLabel;
    private javax.swing.JButton saveButton;
    private javax.swing.JLabel sensorIdLabel;
    private javax.swing.JTextField sensorIdTextField;
    private javax.swing.JComboBox<String> sensorTypeComboBox;
    private javax.swing.JLabel sensorTypeLabel;
    // End of variables declaration//GEN-END:variables
}
